if ("Bottom_D" %in% names(matched_data)) {
depth_summary <- matched_data %>%
summarise(
min_depth = min(Bottom_D, na.rm = TRUE),
max_depth = max(Bottom_D, na.rm = TRUE),
mean_depth = mean(Bottom_D, na.rm = TRUE)
)
cat("Bottom depth range:", depth_summary$min_depth, "-", depth_summary$max_depth, "m\n")
}
return(matched_data)
}
cat("✗ No data to save after processing\n")
return(NULL)
}
# Execute
if (interactive() || !exists("skip_main_execution")) {
combined_data <- main_larval_ctd_combination()
cat("\n🐟 CalCOFI larval-CTD combination completed!\n")
}
library(dplyr)
library(readr)
library(lubridate)
cat("=== CalCOFI Larval Data Bounds Extraction ===\n")
# Function to extract spatial-temporal bounds from larval data
extract_larval_bounds <- function(larval_file = "Larvae.csv") {
if (!file.exists(larval_file)) {
cat("✗ Larval data file not found:", larval_file, "\n")
cat("Please run create_larval_datasets.R first\n")
return(NULL)
}
cat("Loading real larval data...\n")
larval_data <- read_csv(larval_file, show_col_types = FALSE)
cat("✓ Loaded", nrow(larval_data), "larval records\n")
# Extract spatial bounds
spatial_bounds <- larval_data %>%
summarise(
lat_min = min(latitude, na.rm = TRUE),
lat_max = max(latitude, na.rm = TRUE),
lon_min = min(longitude, na.rm = TRUE),
lon_max = max(longitude, na.rm = TRUE),
n_locations = n_distinct(paste(latitude, longitude))
)
cat("\n--- Spatial Bounds ---\n")
cat("Latitude range:", spatial_bounds$lat_min, "to", spatial_bounds$lat_max, "\n")
cat("Longitude range:", spatial_bounds$lon_min, "to", spatial_bounds$lon_max, "\n")
cat("Unique locations:", spatial_bounds$n_locations, "\n")
# Extract temporal bounds
temporal_bounds <- larval_data %>%
mutate(sample_date = as.Date(time)) %>%
summarise(
date_min = min(sample_date, na.rm = TRUE),
date_max = max(sample_date, na.rm = TRUE),
n_dates = n_distinct(sample_date)
)
cat("\n--- Temporal Bounds ---\n")
cat("Date range:", temporal_bounds$date_min, "to", temporal_bounds$date_max, "\n")
cat("Unique sampling dates:", temporal_bounds$n_dates, "\n")
# Extract tow information
tow_bounds <- larval_data %>%
summarise(
tow_min = min(tow_number, na.rm = TRUE),
tow_max = max(tow_number, na.rm = TRUE),
n_tows = n_distinct(tow_number)
)
cat("\n--- Tow Information ---\n")
cat("Tow number range:", tow_bounds$tow_min, "to", tow_bounds$tow_max, "\n")
cat("Unique tow numbers:", tow_bounds$n_tows, "\n")
# Create ROMS bounding box with buffer
buffer_deg <- 0.5  # 0.5 degree buffer around larval sampling area
buffer_days <- 7   # 7 day buffer around sampling dates
roms_bounds <- list(
# Spatial bounds with buffer
lat_min = spatial_bounds$lat_min - buffer_deg,
lat_max = spatial_bounds$lat_max + buffer_deg,
lon_min = spatial_bounds$lon_min - buffer_deg,
lon_max = spatial_bounds$lon_max + buffer_deg,
# Temporal bounds with buffer
date_min = temporal_bounds$date_min - days(buffer_days),
date_max = temporal_bounds$date_max + days(buffer_days),
# Depth bounds for ROMS vertical levels
depth_min = 0,  # Surface
depth_max = 200,  # Standard depth for larval analysis
# Original bounds (no buffer)
original = list(
spatial = spatial_bounds,
temporal = temporal_bounds,
tow = tow_bounds
)
)
cat("\n--- ROMS Bounding Box (with", buffer_deg, "° and", buffer_days, "day buffers) ---\n")
cat("Latitude:", roms_bounds$lat_min, "to", roms_bounds$lat_max, "\n")
cat("Longitude:", roms_bounds$lon_min, "to", roms_bounds$lon_max, "\n")
cat("Date range:", roms_bounds$date_min, "to", roms_bounds$date_max, "\n")
cat("Depth range: 0 to", roms_bounds$depth_max, "m\n")
return(roms_bounds)
}
# Function to create unique sampling locations summary
create_sampling_summary <- function(larval_file = "Larvae.csv") {
larval_data <- read_csv(larval_file, show_col_types = FALSE)
sampling_summary <- larval_data %>%
group_by(latitude, longitude, cruise, time) %>%
summarise(
station_id = first(station),
tow_numbers = paste(unique(tow_number), collapse = ","),
species_count = n_distinct(scientific_name),
total_larvae = sum(larvae_count, na.rm = TRUE),
sample_date = as.Date(first(time)),
.groups = 'drop'
) %>%
arrange(sample_date, latitude, longitude)
cat("\n--- Sampling Locations Summary ---\n")
cat("Unique sampling events:", nrow(sampling_summary), "\n")
# Show first few locations
cat("Sample locations:\n")
print(head(sampling_summary %>%
select(latitude, longitude, sample_date, species_count, total_larvae), 10))
return(sampling_summary)
}
# Main execution function
main_bounds_extraction <- function() {
cat("Starting CalCOFI larval bounds extraction for ROMS access...\n\n")
# Extract bounds
bounds <- extract_larval_bounds()
if (is.null(bounds)) {
cat("Cannot proceed without larval data\n")
return(NULL)
}
# Create sampling summary
sampling_summary <- create_sampling_summary()
# Save bounds for ROMS access
bounds_file <- "calcofi_larval_bounds.rds"
saveRDS(bounds, bounds_file)
cat("✓ Saved bounds data:", bounds_file, "\n")
# Save sampling summary
summary_file <- "calcofi_sampling_summary.csv"
write_csv(sampling_summary, summary_file)
cat("✓ Saved sampling summary:", summary_file, "\n")
# Create ROMS access parameters
cat("\n--- ROMS Access Parameters ---\n")
cat("Use these parameters for ROMS chlorophyll-a data extraction:\n")
cat("lat_range <- c(", bounds$lat_min, ",", bounds$lat_max, ")\n")
cat("lon_range <- c(", bounds$lon_min, ",", bounds$lon_max, ")\n")
cat("date_range <- c('", bounds$date_min, "', '", bounds$date_max, "')\n")
cat("depth_range <- c(", bounds$depth_min, ",", bounds$depth_max, ")\n")
return(list(bounds = bounds, sampling = sampling_summary))
}
# Execute
if (interactive() || !exists("skip_main_execution")) {
larval_bounds <- main_bounds_extraction()
cat("\n📍 CalCOFI larval bounds extraction completed!\n")
}
library(dplyr)
library(readr)
library(lubridate)
library(ncdf4)
library(httr)
cat("=== CEFI Regional MOM6 COBALT Chlorophyll Access ===\n")
# Function to access CEFI COBALT 3D chlorophyll data
access_cefi_cobalt_chlorophyll <- function(larval_bounds_file = "calcofi_larval_bounds.rds") {
cat("--- Accessing CEFI COBALT 3D Chlorophyll Data ---\n")
if (!file.exists(larval_bounds_file)) {
cat("✗ Larval bounds file not found. Please run 02_extract_larval_bounds.R first\n")
return(NULL)
}
# Load larval sampling bounds
bounds <- readRDS(larval_bounds_file)
cat("✓ Loaded larval bounds:", nrow(bounds), "sampling locations\n")
# CEFI Regional MOM6 COBALT parameters
cefi_base_url <- "http://psl.noaa.gov/thredds/dodsC/Projects/CEFI/regional_mom6/cefi_portal/northeast_pacific/full_domain/hindcast/monthly/raw/r20250509"
# 3D Chlorophyll variable from COBALT biogeochemical model
chl_file <- "chl.nep.full.hcast.monthly.raw.r20250509.199301-202412.nc"
chl_url <- paste0(cefi_base_url, "/", chl_file)
cat("CEFI COBALT dataset:\n")
cat("  Region: Northeast Pacific\n")
cat("  Domain: Full\n")
cat("  Frequency: Monthly\n")
cat("  Variable: Chlorophyll - 3D (chl)\n")
cat("  Depth range: 0-200m\n")
cat("  URL:", chl_url, "\n")
# Spatial bounds from larval data (California Current region)
lon_range <- range(bounds$longitude, na.rm = TRUE)
lat_range <- range(bounds$latitude, na.rm = TRUE)
# Expand bounds for better coverage within Northeast Pacific domain
lon_min <- max(lon_range[1] - 1.0, -130)  # Western limit
lon_max <- min(lon_range[2] + 1.0, -115)  # Eastern limit
lat_min <- max(lat_range[1] - 1.0, 28)    # Southern limit
lat_max <- min(lat_range[2] + 1.0, 42)    # Northern limit
cat("Spatial domain:\n")
cat("  Longitude:", lon_min, "to", lon_max, "\n")
cat("  Latitude:", lat_min, "to", lat_max, "\n")
# Temporal bounds from larval data
date_range <- range(bounds$sample_date, na.rm = TRUE)
start_year <- max(1993, year(date_range[1]))  # CEFI data starts 1993
end_year <- min(2024, year(date_range[2]))    # CEFI data ends 2024
cat("Temporal coverage:", start_year, "to", end_year, "\n")
# Access CEFI COBALT chlorophyll data
tryCatch({
# Test connection first
cat("\nTesting CEFI COBALT connection...\n")
response <- HEAD(chl_url)
if (status_code(response) != 200) {
cat("✗ CEFI COBALT dataset not accessible (HTTP", status_code(response), ")\n")
return(NULL)
}
cat("✓ CEFI COBALT dataset accessible\n")
# Open NetCDF connection
nc <- nc_open(chl_url)
# Get dimension information
cat("\nExamining dataset structure...\n")
# Longitude dimension
if ("lon" %in% names(nc$dim)) {
lon_var <- ncvar_get(nc, "lon")
} else if ("longitude" %in% names(nc$dim)) {
lon_var <- ncvar_get(nc, "longitude")
} else {
cat("✗ Longitude dimension not found\n")
nc_close(nc)
return(NULL)
}
# Latitude dimension
if ("lat" %in% names(nc$dim)) {
lat_var <- ncvar_get(nc, "lat")
} else if ("latitude" %in% names(nc$dim)) {
lat_var <- ncvar_get(nc, "latitude")
} else {
cat("✗ Latitude dimension not found\n")
nc_close(nc)
return(NULL)
}
# Depth dimension (z_l is typical for MOM6)
depth_var <- NULL
depth_name <- NULL
for (depth_dim in c("z_l", "depth", "lev", "z")) {
if (depth_dim %in% names(nc$dim)) {
depth_var <- ncvar_get(nc, depth_dim)
depth_name <- depth_dim
break
}
}
if (is.null(depth_var)) {
cat("✗ Depth dimension not found\n")
nc_close(nc)
return(NULL)
}
# Time dimension
if ("time" %in% names(nc$dim)) {
time_var <- ncvar_get(nc, "time")
time_units <- ncatt_get(nc, "time", "units")$value
} else {
cat("✗ Time dimension not found\n")
nc_close(nc)
return(NULL)
}
cat("✓ Dataset dimensions:\n")
cat("  Longitude:", length(lon_var), "points (", round(min(lon_var), 2), "to", round(max(lon_var), 2), ")\n")
cat("  Latitude:", length(lat_var), "points (", round(min(lat_var), 2), "to", round(max(lat_var), 2), ")\n")
cat("  Depth:", length(depth_var), "levels (", round(min(depth_var), 1), "to", round(max(depth_var), 1), "m)\n")
cat("  Time:", length(time_var), "months\n")
# Find spatial indices within our bounds
lon_idx <- which(lon_var >= lon_min & lon_var <= lon_max)
lat_idx <- which(lat_var >= lat_min & lat_var <= lat_max)
# Find depth indices for upper 200m (as requested)
depth_idx <- which(depth_var <= 200)
cat("\nSpatial/depth subset:\n")
cat("  Longitude indices:", length(lon_idx), "(", min(lon_idx), "to", max(lon_idx), ")\n")
cat("  Latitude indices:", length(lat_idx), "(", min(lat_idx), "to", max(lat_idx), ")\n")
cat("  Depth indices:", length(depth_idx), "(0 to 200m)\n")
if (length(lon_idx) == 0 || length(lat_idx) == 0 || length(depth_idx) == 0) {
cat("✗ No data points within specified bounds\n")
nc_close(nc)
return(NULL)
}
# Sample temporal data (focus on larval sampling years)
# Convert time to dates based on units
if (grepl("days since", time_units)) {
time_origin <- as.Date(gsub("days since ", "", time_units))
time_dates <- time_origin + time_var
} else if (grepl("hours since", time_units)) {
time_origin <- as.POSIXct(gsub("hours since ", "", time_units), tz = "UTC")
time_dates <- as.Date(time_origin + time_var * 3600)
} else {
# Fallback: assume days since 1900-01-01
time_dates <- as.Date(time_var, origin = "1900-01-01")
}
# Filter to years with larval data
time_idx <- which(year(time_dates) >= start_year & year(time_dates) <= end_year)
# Sample every 6 months for efficiency (still covers seasonal variation)
time_sample_idx <- time_idx[seq(1, length(time_idx), by = 6)]
cat("  Time indices:", length(time_sample_idx), "samples (every 6 months)\n")
if (length(time_sample_idx) == 0) {
cat("✗ No temporal data within specified range\n")
nc_close(nc)
return(NULL)
}
# Extract 3D chlorophyll data
cat("\nExtracting 3D chlorophyll data...\n")
# Check if chlorophyll variable exists
chl_var_name <- NULL
for (var_name in c("chl", "chlorophyll", "CHL", "CHLA")) {
if (var_name %in% names(nc$var)) {
chl_var_name <- var_name
break
}
}
if (is.null(chl_var_name)) {
cat("✗ Chlorophyll variable not found in dataset\n")
nc_close(nc)
return(NULL)
}
cat("✓ Found chlorophyll variable:", chl_var_name, "\n")
# Extract data in chunks to manage memory
all_chl_data <- list()
for (t_idx in time_sample_idx) {
cat("  Processing time step", which(time_sample_idx == t_idx), "of", length(time_sample_idx), "\n")
# Extract 3D chlorophyll slice
chl_data <- ncvar_get(nc, chl_var_name,
start = c(min(lon_idx), min(lat_idx), min(depth_idx), t_idx),
count = c(length(lon_idx), length(lat_idx), length(depth_idx), 1))
# Convert to data frame
chl_df <- expand.grid(
lon_i = seq_along(lon_idx),
lat_i = seq_along(lat_idx),
depth_i = seq_along(depth_idx)
) %>%
mutate(
longitude = lon_var[lon_idx[lon_i]],
latitude = lat_var[lat_idx[lat_i]],
depth_m = depth_var[depth_idx[depth_i]],
time = time_dates[t_idx],
chlorophyll_mg_m3 = as.vector(chl_data)
) %>%
filter(!is.na(chlorophyll_mg_m3), chlorophyll_mg_m3 > 0, chlorophyll_mg_m3 < 100) %>%  # Remove unrealistic values
select(longitude, latitude, depth_m, time, chlorophyll_mg_m3)
if (nrow(chl_df) > 0) {
all_chl_data[[length(all_chl_data) + 1]] <- chl_df
}
}
nc_close(nc)
# Combine all time steps
if (length(all_chl_data) > 0) {
combined_chl <- bind_rows(all_chl_data)
cat("✓ Extracted", nrow(combined_chl), "3D chlorophyll records\n")
# Data summary
chl_summary <- combined_chl %>%
summarise(
min_chl = min(chlorophyll_mg_m3, na.rm = TRUE),
max_chl = max(chlorophyll_mg_m3, na.rm = TRUE),
mean_chl = mean(chlorophyll_mg_m3, na.rm = TRUE),
n_locations = n_distinct(paste(longitude, latitude)),
n_depths = n_distinct(depth_m),
depth_range = paste(min(depth_m), "to", max(depth_m), "m"),
date_range = paste(min(time), "to", max(time))
)
cat("\nCEFI COBALT Chlorophyll Summary:\n")
cat("  Range:", round(chl_summary$min_chl, 3), "to", round(chl_summary$max_chl, 3), "mg/m³\n")
cat("  Mean:", round(chl_summary$mean_chl, 3), "mg/m³\n")
cat("  Locations:", chl_summary$n_locations, "\n")
cat("  Depth levels:", chl_summary$n_depths, "(", chl_summary$depth_range, ")\n")
cat("  Date range:", chl_summary$date_range, "\n")
return(combined_chl)
} else {
cat("✗ No valid chlorophyll data extracted\n")
return(NULL)
}
}, error = function(e) {
cat("✗ Error accessing CEFI COBALT data:", e$message, "\n")
return(NULL)
})
}
# Function to match CEFI chlorophyll with larval locations
match_cefi_with_larval <- function(cefi_data, larval_file = "Larvae.csv") {
cat("\n--- Matching CEFI Chlorophyll with Larval Data ---\n")
if (is.null(cefi_data) || nrow(cefi_data) == 0) {
cat("✗ No CEFI chlorophyll data available\n")
return(NULL)
}
# Load larval data
larval_data <- read_csv(larval_file, show_col_types = FALSE)
# Spatial-temporal matching with tolerance
spatial_tolerance <- 0.25  # degrees (~25 km)
temporal_tolerance <- 60   # days (2 months)
cat("Matching parameters:\n")
cat("  Spatial tolerance:", spatial_tolerance, "degrees\n")
cat("  Temporal tolerance:", temporal_tolerance, "days\n")
# Create matching keys
larval_for_matching <- larval_data %>%
filter(!is.na(latitude), !is.na(longitude), !is.na(date)) %>%
mutate(
match_lat = round(latitude / spatial_tolerance) * spatial_tolerance,
match_lon = round(longitude / spatial_tolerance) * spatial_tolerance,
larval_date = date
)
cefi_for_matching <- cefi_data %>%
mutate(
match_lat = round(latitude / spatial_tolerance) * spatial_tolerance,
match_lon = round(longitude / spatial_tolerance) * spatial_tolerance,
cefi_date = time
)
# Perform spatial join first
spatial_matches <- larval_for_matching %>%
inner_join(
cefi_for_matching,
by = c("match_lat", "match_lon"),
relationship = "many-to-many"
)
cat("✓ Spatial matches found:", nrow(spatial_matches), "\n")
if (nrow(spatial_matches) == 0) {
cat("✗ No spatial matches between larval and CEFI data\n")
return(NULL)
}
# Apply temporal filter
matched_data <- spatial_matches %>%
filter(abs(as.numeric(larval_date - cefi_date)) <= temporal_tolerance) %>%
select(-starts_with("match_")) %>%
rename(
cefi_depth = depth_m,
cefi_chlorophyll = chlorophyll_mg_m3,
cefi_time = cefi_date
) %>%
arrange(scientific_name, larval_date, cefi_depth)
cat("✓ Spatio-temporal matches:", nrow(matched_data), "larval-CEFI records\n")
if (nrow(matched_data) > 0) {
# Create depth zone summaries
depth_summary <- matched_data %>%
mutate(
depth_zone = case_when(
cefi_depth <= 10 ~ "Surface (0-10m)",
cefi_depth <= 50 ~ "Subsurface (10-50m)",
cefi_depth <= 100 ~ "Intermediate (50-100m)",
TRUE ~ "Deep (100-200m)"
)
) %>%
group_by(depth_zone) %>%
summarise(
n_records = n(),
n_species = n_distinct(scientific_name),
mean_chlorophyll = mean(cefi_chlorophyll, na.rm = TRUE),
min_chlorophyll = min(cefi_chlorophyll, na.rm = TRUE),
max_chlorophyll = max(cefi_chlorophyll, na.rm = TRUE),
.groups = "drop"
)
cat("\nCEFI Chlorophyll by depth zone:\n")
print(depth_summary)
# Species with most matches
species_summary <- matched_data %>%
group_by(scientific_name) %>%
summarise(
n_matches = n(),
depth_range = paste(min(cefi_depth), "to", max(cefi_depth), "m"),
mean_chl = mean(cefi_chlorophyll, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(desc(n_matches)) %>%
head(10)
cat("\nTop 10 species with CEFI chlorophyll matches:\n")
print(species_summary)
}
return(matched_data)
}
# Main execution function
main_cefi_cobalt_access <- function() {
cat("Starting CEFI Regional MOM6 COBALT chlorophyll access...\n\n")
# Access CEFI COBALT 3D chlorophyll data
cefi_data <- access_cefi_cobalt_chlorophyll()
if (is.null(cefi_data)) {
cat("⚠️  CEFI COBALT chlorophyll access failed\n")
cat("This may be due to:\n")
cat("• Network connectivity issues\n")
cat("• CEFI server maintenance\n")
cat("• Dataset access restrictions\n")
cat("• Spatial/temporal bounds outside data coverage\n")
return(NULL)
}
# Save raw CEFI data
cefi_file <- "cefi_cobalt_chlorophyll_3d.csv"
write_csv(cefi_data, cefi_file)
cat("✓ Saved CEFI COBALT data:", cefi_file, "\n")
# Match with larval data
matched_data <- match_cefi_with_larval(cefi_data)
if (!is.null(matched_data) && nrow(matched_data) > 0) {
# Save matched dataset
matched_file <- "cefi_larval_chlorophyll_matched.csv"
write_csv(matched_data, matched_file)
cat("✓ Saved matched larval-CEFI data:", matched_file, "\n")
# Create depth-averaged summaries for each larval record
larval_chl_summary <- matched_data %>%
group_by(larval_source, cruise, latitude, longitude, station, date, scientific_name, larvae_count) %>%
summarise(
cefi_chl_surface = mean(cefi_chlorophyll[cefi_depth <= 10], na.rm = TRUE),
cefi_chl_subsurface = mean(cefi_chlorophyll[cefi_depth > 10 & cefi_depth <= 50], na.rm = TRUE),
cefi_chl_intermediate = mean(cefi_chlorophyll[cefi_depth > 50 & cefi_depth <= 100], na.rm = TRUE),
cefi_chl_deep = mean(cefi_chlorophyll[cefi_depth > 100], na.rm = TRUE),
cefi_chl_mean = mean(cefi_chlorophyll, na.rm = TRUE),
cefi_depth_range = paste(min(cefi_depth), "to", max(cefi_depth), "m"),
n_depth_levels = n_distinct(cefi_depth),
.groups = "drop"
)
summary_file <- "cefi_larval_chlorophyll_summary.csv"
write_csv(larval_chl_summary, summary_file)
cat("✓ Saved larval chlorophyll summary:", summary_file, "\n")
}
cat("\n🌊 CEFI Regional MOM6 COBALT chlorophyll access completed!\n")
cat("Real 3D chlorophyll data from Northeast Pacific COBALT model\n")
return(list(
cefi_data = cefi_data,
matched_data = matched_data
))
}
# Execute
if (interactive() || !exists("skip_main_execution")) {
cefi_results <- main_cefi_cobalt_access()
}
